import getpass 
import time
import hashlib
import uuid
import string 
import shelve 



class Users:
	def __init__(self, name):
		self.name = name
		self.users = {}

	def addUser(self, name, birthdate, userID, accessStatus):
		self.users[userID] = User(name, birthdate, userID, accessStatus)
	def saveProgramInformation(self):
		taskcommanderS = shelve.open('taskcommanderS')
		listkeys = self.users.keys()
		listvalues = self.users.values()
		i = 0
		numberofusers = len(self.users)
		while (i < numberofusers):
			taskcommanderS[listkeys[i]] = listvalues[i]
			i += 1
		taskcommanderS.close()
	def printdb(self):
		taskcommanderS = shelve.open('taskcommanderS')
		print (taskcommanderS)


SessionOne = Users('Session_One')

class User:
	def __init__(self, name, birthdate, userID, accessStatus):
		self.name = name
		self.birthdate = birthdate
		self.userID = userID
		self.accessStatus = accessStatus
		self.projects = {}
	def addProject(self, projectName):
		self.projects[projectName] = Project(projectName)
		self.projects[projectName].setProjectManager = self.userID
	def setUserName(self, userName_par):
		self.userName_par = userName_par
	def getUserName(self):
		return userName
	def setPassword(self, password):
		self.password = password
		self.hashedpassword = hash_password(password)
	def getPassword(self):
		return self.hashedpassword
	def __repr__(self):
		return self.name
		return self.birthdate
		return self.userID
		return self.accessStatus
		return self.projects
		return self.userName_par
		return self.password
		return self.hashedpassword
class Project:
	#biggest problem to resolve here is how project can have access to its project manager
	def __init__(self, name):
		self.name = name
		self.tasks = {}
		self.userscanview = []
	

	def addTask(self, taskName):
		self.tasks[taskName] = Task(taskName) #can't have duplicate task names in same project 
	def setProjectManager(self, ProjectManager):
		self.ProjectManager = ProjectManager
	def getProjectManager(self, ProjectManager):
		return self.ProjectManager
	def setDescription(self, ProjectDescription):
		self.description = ProjectDescription
	def setStartDate(self, startdate):
		self.startdate = startdate
	def setEndDate(self, enddate):
		self.enddate = enddate
	def addUsercanview(self, userID):
		self.userscanview.append(userID)
	def getUserscanview(self):
		return self.userscanview
	def __repr__(self):
		return self.name
		return self.tasks
		return self.description
		return self.startdate
		return self.enddate
class Task:
	def __init__(self, name):
		self.name = name
		self.completion = False
	def __repr__(self):
		return self.name
		return self.completion


def hash_password(passwordpar):
	salt = uuid.uuid4().hex
	return hashlib.sha256(salt.encode() + passwordpar.encode()).hexdigest() + ':'+ salt
def check_password(hashed_passwordpar, user_passwordpar):
	password, salt = hashed_passwordpar.split(':')
	return password == hashlib.sha256(salt.encode() + user_passwordpar.encode()).hexdigest()
def returnProgramtoPastState():
	taskcommanderS = shelve.open('taskcommanderS')
def CreateProject(someUser):
	name = raw_input("Enter the name of your project")
	someUser.addProject(name)
	description = raw_input("Enter a short description of your project")
	someUser.projects[name].setDescription(description)
	start = raw_input("Enter the start date for the project") #can automate this
	someUser.projects[name].setStartDate(start)
	end = raw_input("Enter the end date for the project")
	someUser.projects[name].setEndDate
def DeleteProject(someUser, projectName):
	if projectName in someUser.projects[projectName]:
		del someUser.projects[projectName]


def mainMenu(someUser):
	returnProgramtoPastState()
	status = ''
	while (status != 'q'):
		print("Welcome to Task Commander")
		status = raw_input("Enter (c) to create a new project and (s) to select an existing project. Select (q) to quit")
		if (status == 'c'):
			CreateProject(someUser)
			saveProgramInformation(someDictionary)
		if (status == 's'):
			print someUser.projects.keys()
			active_project = raw_input("Select the active project")
			if (someUser.userId == someUser.projects[active_project].getProjectManager()):
				PMdisplay(someUser.projects[active_project])
			else:
				viewDisplay(someProject)

def PMdisplay(someProject):
	returnProgramtoPastState()
	status = ''
	while (status != 'q'):
		print("Welcome to the Display.")
		status = raw_input("Enter (e) to edit project infromation. Enter (v) to view project information. Enter (c) to complete a task. Enter (r) to create new task. Enter (d) to delete task.")
		if (status == 'e'):
			print (someProject.getUserscanview)
			newviewer = raw_input("enter user id of new user")
			someProject.addUsercanview(newviewer)
			users[userid].addProject(someProject)
			break
	

def login():
	returnProgramtoPastState()
	status = ''
	while (status != 'q'):
		status = raw_input("Are you an existing user? Enter (y/n). Press (q) to quit")
		if (status == 'y'):
			SessionOne.printdb()
			datebase = taskcommanderS
			username = raw_input("Enter username")
			userid = raw_input("Enter userid")
			expassword = getpass.getpass()
			if (check_password(database[userid].getPassword(), expassword)):
				mainMenu(databse[userid])
				break 
			else:
				break
		elif (status == 'n'):
			name =raw_input("Enter your full name")
			birthdate =raw_input("Enter your birthdate 'MM/DD/YYYY")
			Uid = raw_input("Enter your user identification number")
			status = raw_input("Select (A) for administrator and (U) for user")
			SessionOne.addUser(name, birthdate, Uid, status)
			username = raw_input("Set your username (you may edit this later): ")
			SessionOne.users[Uid].setUserName(username)
			password = getpass.getpass()
			SessionOne.users[Uid].setPassword(password)
			SessionOne.saveProgramInformation()
	return l 

login()
