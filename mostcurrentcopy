import getpass 
import datetime
import hashlib
import uuid
import string 
import shelve 


class Users:
	def __init__(self, name):
		self.name = name
		self.users = {}

	def returnProgramtoPastState(self):
		self.users = shelve.open('taskcommanderS')

	def addUser(self, name, birthdate, userID, accessStatus):
		self.users[userID] = User(name, birthdate, userID, accessStatus)

	def saveProgramInformation(self):
		self.taskcommanderS = shelve.open('taskcommanderS')
		listkeys = self.users.keys()
		listvalues = self.users.values()
		i = 0
		numberofusers = len(self.users)
		while (i < numberofusers):
			self.taskcommanderS[listkeys[i]] = listvalues[i]
			i += 1
		self.taskcommanderS.close()

	def printdb(self):
		self.taskcommanderS = shelve.open('taskcommanderS')
		print (self.taskcommanderS)


SessionOne = Users('Session_One')

class User:
	def __init__(self, name, birthdate, userID, accessStatus):
		self.name = name
		self.birthdate = birthdate
		self.userID = userID
		self.accessStatus = accessStatus
		self.projects = {}
	def addProject(self, projectName):
		self.projects[projectName] = Project(projectName)
		self.projects[projectName].setProjectManager = self.userID
		print self.projects
	def setUserName(self, userName_par):
		self.userName_par = userName_par
	def getUserName(self):
		return userName
	def setPassword(self, password):
		self.password = password
		self.hashedpassword = hash_password(password)
	def getPassword(self):
		return self.hashedpassword
	def __repr__(self):
		return self.name
		return self.birthdate
		return self.userID
		return self.accessStatus
		return self.projects
		return self.userName_par
		return self.password
		return self.hashedpassword
class Project:
	def __init__(self, name):
		self.name = name
		self.tasks = {}
		self.userscanview = []
	def addTask(self, taskName):
		self.tasks[taskName] = Task(taskName) #can't have duplicate task names in same project 
	def setProjectManager(self, ProjectManager):
		self.ProjectManager = ProjectManager
	def getProjectManager(self):
		return self.ProjectManager
	def setDescription(self, ProjectDescription):
		self.description = ProjectDescription
	def setStartDate(self, startdate):
		self.startdate = startdate
	def setEndDate(self, enddate):
		self.enddate = enddate
	def getEndDate(self):
		return self.enddate
	def addUsercanview(self, userID):
		self.userscanview.append(userID)
	def getUserscanview(self):
		return self.userscanview
	def __repr__(self):
		return self.name
		return self.tasks
		return self.description
		return self.startdate
		return self.enddate
		return self.ProjectManager
class Task:
	def __init__(self, name):
		self.name = name
		self.completion = False
	def setDescription(self, TaskDescription):
		self.description = TaskDescription
	def setStartDate(self, startdate):
		self.startdate = startdate
	def getTaskStartDate(self):
		return self.startdate
	def setTaskEndDate(self,enddate):
		return self.enddate
	def __repr__(self):
		return self.name
		return self.completion
		return self.description
		return self.startdate
		return self.enddate


def hash_password(passwordpar):
	salt = uuid.uuid4().hex
	return hashlib.sha256(salt.encode() + passwordpar.encode()).hexdigest() + ':'+ salt
def check_password(hashed_passwordpar, user_passwordpar):
	password, salt = hashed_passwordpar.split(':')
	return password == hashlib.sha256(salt.encode() + user_passwordpar.encode()).hexdigest()

def DeleteProject(someUser, projectName):
	if projectName in someUser.projects[projectName]:
		del someUser.projects[projectName]

def createTask(projectName): #!!!
    name = input("Enter the name of the task")
    projectName.addTask(name)
    description = input("Enter a short description of the task")
    projectName.tasks[name].setDescription(description)
    start = input("Enter the start date for the task")
    if start == "":
        start = str(datetime.date.today())
	projectName.tasks[name].setStartDate(start)
    end = input("Enter the deadline for the task")
    if end > projectName.getEndDate(): # if task end date is later than project end date,
        projectName.setEndDate(end) # update project's end date
    projectName.tasks[name].setTaskEndDate(end)

def DeleteTask(projectName, taskName): #!!!
	if taskName in projectName.tasks:
		del projectName.tasks[taskName]


def mainMenu(userid):    #general format for interacting with the database
	status = ''
	someUser = SessionOne.users[userid]  #1
	while (status != 'q'):
		print("Welcome to Task Commander")
		status = raw_input("Enter (c) to create a new project and (s) to select an existing project.")
		if (status == 'c'):
			name = raw_input("Enter the name of your project")
			someUser.addProject(name)
			description = raw_input("Enter a short description of your project")
			someUser.projects[name].setDescription(description)
			start = raw_input("Enter the start date for the project")
			if start == " ": 
				start = str(datetime.date.today())
			someUser.projects[name].setStartDate(start)
			end = raw_input("Enter the end date for the project")
			someUser.projects[name].setEndDate(end)
			identification = raw_input("Confirm user id")
			someUser.projects[name].setProjectManager(identification)
		elif (status == 's'):
			print someUser.projects
			active_project = raw_input("Select the active project")
			if (someUser.userID == someUser.projects[active_project].getProjectManager()):
				PMdisplay(someUser.projects[active_project])
			else:
				viewDisplay(someProject)
		else: 
			print "Please enter a valid input"
	SessionOne.users[userid] = someUser #2
	SessionOne.saveProgramInformation()	#3


def viewDisplay(someProject):
	returnProgramtoPastState()
	print(someProject.name)
	print(someProject.getdescription())
	print(someProject.tasks)
	activetask = raw_input("select task to complete")
	someProject[activetask].completion = True

def PMdisplay(someProject):
	returnProgramtoPastState()
	status = ''
	while (status != 'q'):
		print("Welcome to the Display.")
		status = raw_input("Enter (e) to edit project infromation. Enter (v) to view project information. Enter (c) to complete a task. Enter (r) to create new task. Enter (d) to delete task.")
		if (status == 'e'):
			print (someProject.getUserscanview)
			newviewer = raw_input("enter user id of new user")
			someProject.addUsercanview(newviewer)
			users[userid].addProject(someProject)
			break
	

def login():
	SessionOne.returnProgramtoPastState()
	status = ''
	while (status != 'q'):
		status = raw_input("Are you an existing user? Enter (y/n). Press (q) to quit")
		if (status == 'y'):
			SessionOne.printdb()
			username = raw_input("Enter username")
			userid = raw_input("Enter userid")
			if (not SessionOne[userid]):
				print("user id does not exist")
			expassword = getpass.getpass()
			if (check_password(SessionOne.users[userid].getPassword(), expassword)):
				mainMenu(userid)
			break
		elif (status == 'n'):
			name =raw_inrput("Enter your full name")
			birthdate =raw_input("Enter your birthdate 'MM/DD/YYYY")
			Uid = raw_input("Enter your user identification number")
			if Uid in SessionOne.users:
				print ('user identification number already exists')
			status = raw_input("Select (A) for administrator and (U) for user")
			SessionOne.addUser(name, birthdate, Uid, status)
			username = raw_input("Set your username (you may edit this later): ")
			SessionOne.users[Uid].setUserName(username)
			password = getpass.getpass()
			SessionOne.users[Uid].setPassword(password)
			SessionOne.saveProgramInformation()

login()
